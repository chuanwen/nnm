// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// conv3d
NumericVector conv3d(NumericVector images_4d, NumericVector kernels_4d, NumericVector outImages_4d, std::string flag);
RcppExport SEXP _nnm_conv3d(SEXP images_4dSEXP, SEXP kernels_4dSEXP, SEXP outImages_4dSEXP, SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type images_4d(images_4dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernels_4d(kernels_4dSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type outImages_4d(outImages_4dSEXP);
    Rcpp::traits::input_parameter< std::string >::type flag(flagSEXP);
    rcpp_result_gen = Rcpp::wrap(conv3d(images_4d, kernels_4d, outImages_4d, flag));
    return rcpp_result_gen;
END_RCPP
}
// convFlip
NumericVector convFlip(NumericVector source, NumericVector target);
RcppExport SEXP _nnm_convFlip(SEXP sourceSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(convFlip(source, target));
    return rcpp_result_gen;
END_RCPP
}
// sumConvInv
NumericVector sumConvInv(NumericVector delta, NumericVector x, int H, int W);
RcppExport SEXP _nnm_sumConvInv(SEXP deltaSEXP, SEXP xSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(sumConvInv(delta, x, H, W));
    return rcpp_result_gen;
END_RCPP
}
// MaxPoolForwardC
NumericVector MaxPoolForwardC(NumericVector x, int H, int W);
RcppExport SEXP _nnm_MaxPoolForwardC(SEXP xSEXP, SEXP HSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxPoolForwardC(x, H, W));
    return rcpp_result_gen;
END_RCPP
}
// MaxPoolBackwardC
NumericVector MaxPoolBackwardC(NumericVector x, NumericVector a, NumericVector errorOut);
RcppExport SEXP _nnm_MaxPoolBackwardC(SEXP xSEXP, SEXP aSEXP, SEXP errorOutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type errorOut(errorOutSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxPoolBackwardC(x, a, errorOut));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nnm_conv3d", (DL_FUNC) &_nnm_conv3d, 4},
    {"_nnm_convFlip", (DL_FUNC) &_nnm_convFlip, 2},
    {"_nnm_sumConvInv", (DL_FUNC) &_nnm_sumConvInv, 4},
    {"_nnm_MaxPoolForwardC", (DL_FUNC) &_nnm_MaxPoolForwardC, 3},
    {"_nnm_MaxPoolBackwardC", (DL_FUNC) &_nnm_MaxPoolBackwardC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_nnm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
